pipeline {
    parameters {
        choice(name: 'DEPLOY_ENV', choices: ['dev', 'prod'], description: 'Deployment environment.')
        string(name: 'BRANCH', defaultValue: 'master', description: 'Branch to use for the deployment process.')
        string(name: 'VERSION', defaultValue: null, description: 'Version to deploy (git tag in master branch without the "v"). E.g., 0.2.0. If you are deploying to dev, from your branch, ignore this.')
        booleanParam(name: 'SKIP_OS_DEPLOYMENT', defaultValue: false, description: 'Whether to skip the OS Deployment related stages or not.')
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: '100', artifactNumToKeepStr: '30'))
        timeout(time: 1, unit: 'HOURS')
        disableConcurrentBuilds()
        skipDefaultCheckout(true)
        ansiColor('xterm')
        timestamps()
    }

    agent {
        node {
            label 'lakehouse_base'
        }
    }

    environment {
        AWS_CREDENTIALS = credentials('aws-lakehouse-cicd')
        PYPI_CREDENTIALS = credentials('pypi-credentials')
        GIT_CREDENTIALS_LAK = credentials('push-to-github-lak')
        GIT_CREDENTIALS_LAK_DOCS = credentials('push-to-github-lak-docs')
        DEPLOY_ENV = getDeploymentEnv()
        DEPLOY_VERSION = getDeploymentVersion()
        DEPLOY_GIT_OBJECT = getDeploymentGitObject()
    }

    stages {
        stage('cleanup workspace') {
            steps {
                cleanWs(disableDeferredWipeout: true, deleteDirs: true)
            }
        }

        stage('Clone') {
            steps {
                retry(3) {
                    script {
                        checkout([
                                $class           : 'GitSCM',
                                branches         : [['name': env.DEPLOY_GIT_OBJECT]],
                                userRemoteConfigs: scm.userRemoteConfigs
                        ])
                    }
                }
            }
        }

        stage('Build Image') {
            steps {
                sh 'make build-image version=' + "${env.DEPLOY_VERSION}"
            }
        }

        stage('Parallel') {
            parallel {

                stage('Lint') {
                    steps {
                        sh 'make lint version=' + "${env.DEPLOY_VERSION}"
                    }
                }

                stage('Test Security') {
                    steps {
                        sh 'make test-security version=' + "${env.DEPLOY_VERSION}"
                    }
                }

                stage('Test dependencies') {
                    steps {
                        sh 'make test-deps version=' + "${env.DEPLOY_VERSION}"
                    }
                }

                stage('Test') {
                    steps {
                        sh 'make test version=' + "${env.DEPLOY_VERSION}"
                    }
                }

            }
        }

        stage('Deploy') {
            steps {
                script {
                    if (params.BRANCH == 'master') {
                        // if we are deploying from master then we also deploy the artefacts into the latest folder (latest_suffix)
                        sh 'make deploy latest_suffix="latest" deploy_env=' + "${env.DEPLOY_ENV}" + ' version=' + "${env.DEPLOY_VERSION}" + ' aws_credentials_file=$AWS_CREDENTIALS'
                    } else {
                        // else we use latest-feature folder (default latest_suffix)
                        sh 'make deploy deploy_env=' + "${env.DEPLOY_ENV}" + ' version=' + "${env.DEPLOY_VERSION}" + ' aws_credentials_file=$AWS_CREDENTIALS'
                    }
                }
            }
        }

        stage('Open Source Deployment') {
            when {
                expression {
                    (params.BRANCH == 'master' && env.DEPLOY_ENV == 'prod' && !params.SKIP_OS_DEPLOYMENT) || (params.BRANCH == 'feature/os-enhancements' && env.DEPLOY_ENV == 'dev' && !params.SKIP_OS_DEPLOYMENT)
                }
            }
            stages {
                stage('Sync Code with GitHub') {
                    steps {
                        script {
                            sh 'make sync-to-github version=' + "${env.DEPLOY_VERSION}" + ' git_credentials_file=$GIT_CREDENTIALS_LAK repository=lakehouse-engine'
                        }
                    }
                }

                stage('Deploy Docs to Github') {
                    steps {
                        script {
                            sh 'make deploy-docs-to-github version=' + "${env.DEPLOY_VERSION}" + ' git_credentials_file=$GIT_CREDENTIALS_LAK_DOCS repository=lakehouse-engine-docs os_deployment=True'
                        }
                    }
                }

                stage('Deploy to Pypi') {
                    steps {
                        script {
                            sh 'make deploy-to-pypi-and-clean os_deployment=True version=' + "${env.DEPLOY_VERSION}" + ' pypi_credentials_file=$PYPI_CREDENTIALS'
                        }
                    }
                }
            }
        }

        stage('Notify') {
            when {
                expression {
                    params.BRANCH == 'master'
                }
            }
            steps {
                script {
                    params = readYaml file: 'cicd/meta.yaml'
                    release_notes = sh(script:'cat CHANGELOG.md | cut -d ")" -f 2 | head -n 10', returnStdout: true).trim()
                    recipients = params["mail_recipients"]["${env.DEPLOY_ENV}"].join(";")
                    version_deploy_path = sh(script:'make print-variable var="version_deploy_path" deploy_env=' + "${env.DEPLOY_ENV}" + ' version=' + "${env.DEPLOY_VERSION} latest_suffix='latest'", returnStdout: true).trim()
                    latest_deploy_path = sh(script:'make print-variable var="latest_deploy_path" deploy_env=' + "${env.DEPLOY_ENV}" + ' version=' + "${env.DEPLOY_VERSION} latest_suffix='latest'", returnStdout: true).trim()
                    emailext(
                            attachLog: false,
                            compressLog: true,
                            body: """
                            <BR>A new version <b>$env.DEPLOY_VERSION</b> of the <b>Lakehouse Engine</b> was deployed to <b>$env.DEPLOY_ENV</b>.<BR><BR>
                            The wheel can be found in: 
                            <ul>
                                <li>${version_deploy_path}</li>
                                <li>${latest_deploy_path}</li>
                            </ul>
                            You can check the lakehouse-engine documentation here: ${params["engine_docs"]}.
                            Check the latest updates here:<BR>
                            <pre>
                            ${release_notes}
                            </pre><BR>
                            For more details, please check the complete changelog and/or the additional resources listed below: 
                            <ul>
                              <li>${params["changelog_url"]}</li>
                              <li>${params["code_url"]}</li>
                              <li>${params["confluence_url"]}</li>
                            </ul>
                            """,
                            mimeType: 'text/html',
                            replyTo: "${params['reply_to']}",
                            from: "${params['from']}",
                            to: recipients,
                            subject: "Lakehouse Engine Updates - $env.DEPLOY_VERSION"
                    )
                }
            }
        }
    }
}

/**
 * Get deployment environment given certain Jenkins parameters and the team's deployment guidelines.
 * @return adequate deployment environment
 */
def String getDeploymentEnv() {
    deployEnv = params.DEPLOY_ENV

    if (params.BRANCH == 'master') {
        return deployEnv
    } else {
        // force 'dev' as deployment environment
        return 'dev'
    }
}

/**
 * Get deployment git object (branch name or tag reference) given certain Jenkins parameters and the team's deployment guidelines.
 * @return git object (branch or tag)
 */
def String getDeploymentGitObject() {
    gitObject = params.BRANCH

    if (params.BRANCH == 'master') {
        if (params.VERSION ==~ '[\\d]{1,3}\\.[\\d]{1,3}\\.[\\d]{1,3}') {
            // force the git object to checkout to be a version tag
            gitObject = "refs/tags/v${params.VERSION}"
            return gitObject
        }
        else {
            throw new Exception("Version ${params.VERSION} does not match valid git version tag. It should be in the form of <major>.<minor>.<patch>.")
        }
    } else {
        return gitObject
    }
}

/**
 * Get deployment version given certain Jenkins parameters and the team's deployment guidelines.
 * @return deployment version
 */
def String getDeploymentVersion() {
    version = params.VERSION

    if (params.BRANCH == 'master') {
        if (version ==~ '[\\d]{1,3}\\.[\\d]{1,3}\\.[\\d]{1,3}') {
            return version
        }
        else {
            throw new Exception("Version ${version} does not match valid git version tag. It should be in the form of <major>.<minor>.<patch>.")
        }
    } else {
        // force branch as the version to be deployed when we are dealing with feature branches.
        return params.BRANCH.replaceAll("[/-]", "_").toLowerCase()
    }
}